#!/usr/bin/env python

PACKAGE = 'upo_rrt_planners'

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("solve_time", double_t, 0, "time that the RRT is allowed to plan a path", 0.5, 0.1, 9.9); 
gen.add("visualize_rrt_tree", bool_t, 0, "Whether or not to publish the rrt tree for visualization purposes", True);
gen.add("visualize_costmap", bool_t, 0, "Whether or not to publish the costmap for visualization purposes", True);
gen.add("show_statistics", bool_t, 0, "Whether or not to print on the screen the RRT statistics", True);

gen.add("path_smoothing", bool_t, 0, "Whether or not to do a simple smoothing of the RRT path", True);
gen.add("smoothing_samples", int_t, 0, "If 'path_smoothing is enabled', it indicates the number of samples to include in the window for smoothing", 5, 0, 100);

gen.add("goal_bias", double_t, 0, "Percentage of goal biasing", 0.05, 0.0, 20.0); 
gen.add("max_rrt_insertion_dist", double_t, 0, "Max distance (meters) to insert a new node", 0.25, 0.0, 5.0);
gen.add("rrtstar_first_path_biasing", bool_t, 0, "Whether or not to bias the sampling from the first solution found", False);
gen.add("rrtstar_first_path_bias", double_t, 0, "Percentage of sampling from the first solution found", 0.8, 0.0, 1.0);
gen.add("rrtstar_first_path_stddev", double_t, 0, "Standard deviation (m) around the first solution found to sample from", 0.4, 0.0, 4.0);
gen.add("full_path_biasing", bool_t, 0, "Whether or not to bias the sampling from a plath passed", True);
gen.add("full_path_bias", double_t, 0, "Percentage of sampling from the path passed", 0.8, 0.0, 1.0);
gen.add("full_path_stddev", double_t, 0, "Standard deviation (m) around the path passed to sample from", 1.0, 0.0, 4.0);
gen.add("gmm_biasing", bool_t, 0, "Whether or not to bias the sampling from a GMM", False);
gen.add("gmm_bias", double_t, 0, "Percentage of sampling from the GMM", 0.95, 0.0, 1.0);

exit(gen.generate(PACKAGE, "upo_rrt_planners", "RRTRosWrapper"))
